import pandas as pdimport numpy as npimport osfrom typing import Tupleimport matplotlib.pyplot as pltimport seaborn as snssns.set()def import_clean_data() -> pd.DataFrame:    path = os.path.join('..', '..', 'data', 'processed', 'final.csv')    df =  pd.read_csv(path, index_col = 0)    df['trip_start_time'] = pd.to_datetime(df['trip_start_time'], format='%Y-%m-%d %H:%M:%S')    df['trip_stop_time'] = pd.to_datetime(df['trip_stop_time'], format='%Y-%m-%d %H:%M:%S')    return dfdef get_popular_days(df: pd.DataFrame, period: str = 'year') -> pd.Series:    if period == 'year':        popular_days =  df.groupby(['day']).size()    else:        popular_days = df.groupby([period, 'day']).size()    return popular_daysdef get_average_ride_times(df: pd.DataFrame, period: str = 'day') -> pd.Series:        return df.groupby(period)['trip_duration_seconds'].mean()def get_average_daily(df: pd.DataFrame, period: str = 'month') -> pd.Series:        days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]        sr = df.groupby(period).size()        for index, item in sr.items():            sr[index] =  item / days_in_month[index - 1]        return sr    def top_stn(df: pd.DataFrame, n: int = 5 ) -> Tuple[bool, str]:    top_starts = df['from_station_name'].value_counts()[:n].index.tolist()    top_stops = df['to_station_name'].value_counts()[:n].index.tolist()    return top_starts, top_stopsdef total_earned(df: pd.DataFrame) -> Tuple[int, int, int]:    df_casual = df[df['user_type'] == 'Casual']    df_member = df[df['user_type'] == 'Member']    casual_overages = df_casual['overages'].sum()    member_overages = df_member['overages'].sum()        return casual_overages, member_overages, df['overages'].sum()def number_overages(df: pd.DataFrame) -> Tuple[int, int, int]:    df_casual = df[df['user_type'] == 'Casual']    df_member = df[df['user_type'] == 'Member']    casual_number_over = df_casual[df_casual['overages'] > 0].shape[0]    member_number_over = df_member[df_member['overages'] > 0].shape[0]    total = df[df['overages'] > 0].shape[0]        return casual_number_over, member_number_over, totaldef get_popular_routes(df: pd.DataFrame, n: int = 3) -> pd.Series:    return df.groupby(['from_station_name','to_station_name']).size().reset_index().rename(columns={0:'count'}).nlargest(n, 'count')    def main():    df = import_clean_data()    print(df.dtypes)    print(df.head())    print('\n~~~Popular days~~\n')    sr_pop_days = get_popular_days(df)    print(sr_pop_days.index)             print(sr_pop_days)    sr_pop_q = get_popular_days(df, 'quarter')        for q, sr in sr_pop_q.groupby('quarter'):        print('most popular day in ',":", sr.idxmax(), sr.max())            print(sr_pop_q)        sr_pop_m = get_popular_days(df, 'month')    for d, sr in sr_pop_m.groupby('month'):        print('most popular day in ',":", sr.idxmax(), sr.max())        sr_ride_t = get_average_ride_times(df)    print(sr_ride_t)    #sns.lineplot(sr_ride_t)    sr_ride_t = sr_ride_t.map(lambda x : x / 60)    print(sr_ride_t)    plt.figure()    plt.plot(sr_ride_t, marker='o')    plt.xticks(np.arange(7), ('M', 'T', 'W', 'T', 'F', 'S', 'S'))    plt.xlabel('Day Of The Week')    plt.ylabel('Average Trip Duration (minutes)')    plt.title('2017 Average Trip Times by Day of Week')        sr_ride_m = get_average_ride_times(df, 'month')    sr_ride_m = sr_ride_m.map(lambda x : x / 60)    plt.figure()    plt.plot(sr_ride_m, color = 'r', marker='o')    plt.xticks(np.arange(1,13), ('J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'))    plt.xlabel('Month')    plt.ylabel('Average Trip Duration (minutes)')    plt.title('2017 Average Trip Times by Month')        print(sr_ride_m)        sr_avg_d = get_average_daily(df)    plt.figure()    plt.plot(sr_avg_d, color = 'g', marker='o')    plt.xticks(np.arange(1,13), ('J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'))    plt.xlabel('Month')    plt.ylabel('Average Daily Number of Trips')    plt.title('2017 Average Daily Number of Trips by Month')        [start, stop]  = top_stn(df)    print('\n~~ Popular Start ~~\n')    print(start)    print('\n~~ Popular Stop ~~\n')    print(stop)        [casual_trips, member_trips, total_over] = number_overages(df)    plt.figure()    plt.pie([casual_trips, member_trips], labels = [str(casual_trips), str(member_trips)])    plt.title('Number of Overage Trips by User Type')    plt.legend(['Casual', 'Member'])    print(total_over)        [casual_fees, member_fees, total_fees] = total_earned(df)    plt.figure()    plt.pie([casual_fees, member_fees], labels = ['$ ' + str(casual_fees), '$ ' + str(member_fees)], colors = ['y', 'g'])    plt.title('Overage Fees Accrued by User Type')    plt.legend(['Casual', 'Member'])    print(total_fees)        df_popular = get_popular_routes(df,10)    for index, row in df_popular.iterrows():        print('\n\nstart:', row['from_station_name'], '\nstop:', row['to_station_name'], '\nnumber:', row['count'])                if __name__ == '__main__':    main()